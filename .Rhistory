install.packages("numDeriv", "rootSolve", "geex")
library("numDeriv")
library("rootSolve")
library("geex")
# Data
y <- c(7,1,5,3,24)  # Data (observations)
n <- length(y)      # Number of observations
############################################
# Mean by usual / closed-form estimator
mu_closed <- sum(y)/n   # Manually computing mean by sum and dividing by n
# mu_closed = mean(y)   # Built-in function
print("Estimated mean")
print(paste("Closed-form:", round(mu_closed,3)))
############################################
# Defining estimating equation
estimating_function <- function(mu){
estf = y - mu
return(estf)
}
estimating_equation <- function(mu){
estf = estimating_function(mu)          # Return estimating function
este = sum(estf)                        # Sum over all estimating functions
return(este)
}
############################################
# Root-finding
proc <- rootSolve::multiroot(f = estimating_equation,     # Function to find root(s) of
start = c(0))                # ... starting values for root-finding procedure
mu_root <- proc$root
print(paste("Root-finder:", round(mu_root,3)))
############################################
# Baking the bread (approximate derivative)
deriv <- numDeriv::jacobian(func = estimating_equation,   # Function to find derivative of
x = mu_root)                  # Array of values to compute derivative at (root of estimating equation)
bread <- -1*deriv / n
############################################
# Cooking the filling (matrix algebra)
outerprod <- sum(estimating_function(mu_root) * estimating_function(mu_root))
# outerprod <- t(estimating_function(mu_root)) %*% estimating_function(mu_root) # alternative code using matrix algebra
filling <- outerprod/n
############################################
# Assembling the sandwich (matrix algebra)
sandwich <- (bread^-1) %*% filling %*% (bread^-1)
se <- sqrt(sandwich / n)
print(paste("95% CI:", round(mu_root - 1.96*se,3), round(mu_root + 1.96*se,3)))
####################################################################################################################
# Using geex instead of by-hand
psi <- function(data){      # Function of estimating functions (to be used in geex::m_estimate)
y <- data$y
function(theta){
return(y-theta)
}
}
mestr <- geex::m_estimate(estFUN = psi,                                      # Function of estimating functions
data = as.data.frame(y),                           # Data to be used (must be data frame)
root_control = setup_root_control(start = c(0)))   # Set starting values
mu_geex <- roots(mestr)         # Extract roots
se_geex <- sqrt(vcov(mestr))    # Extract finite sample variance and take sqrt to get se
print(paste("Geex:", round(mu_geex,3)))
print(paste("95% CI:", round(mu_geex - 1.96*se_geex,3), round(mu_geex + 1.96*se_geex,3)))
library("tidyverse")
dat <- tibble(anemia=c(rep(0,4),rep(1,4)),
bp=rep(c(rep(0,2),rep(1,2)),2),
ptb=rep(c(0,1),4),
n=c(496,74,113,25,85,15,15,3)) %>%
uncount(n)
View(dat)
n <- nrow(dat)     # Number of observations
reg_mle <- glm(ptb ~ anemia + bp, data=dat, family="binomial")
reg_mle
ests_mle <-as.data.frame(cbind("beta"=reg_mle$coefficients,
"se"=sqrt(diag(vcov(reg_mle))))) %>%
mutate(lcl = beta - 1.96*se,
ucl = beta + 1.95*se)
vcov(reg_mle)
diag(vcov(reg_mle))
intlist <- row.names(ests_mle)
print("Estimated logistic regression")
print("MLE")
print(round(ests_mle,3))
reg_mle <- glm(ptb ~ anemia + bp, data=dat, family="binomial")
ests_mle <-as.data.frame(cbind("beta"=reg_mle$coefficients,
"se"=sqrt(diag(vcov(reg_mle))))) %>%
mutate(lcl = beta - 1.96*se,
ucl = beta + 1.95*se)
intlist <- row.names(ests_mle)
print("Estimated logistic regression")
print("MLE")
print(round(ests_mle,3))
############################################
# Defining estimating equation
estimating_function <- function(beta){
p <- plogis(beta[1] + beta[2]*dat$anemia + beta[3]*dat$bp)
ef_1 <- (dat$ptb - p)
ef_2 <- (dat$ptb - p)*dat$anemia
ef_3 <- (dat$ptb - p)*dat$bp
return(cbind(ef_1, ef_2, ef_3))
}
estimating_equation <- function(beta){
estf = estimating_function(beta)        # Return estimating function
este = colSums(estf)                    # Estimating equations are sum
return(este)
}
############################################
# Root-finding
proc <- rootSolve::multiroot(f = estimating_equation,     # Function to find root(s) of
start = c(-2,0,0))           # Starting values for root-finding procedure
beta_root <- proc$root
############################################
# Baking the bread (approximate derivative)
deriv <- numDeriv::jacobian(func = estimating_equation,   # Function to find derivative of
x = beta_root)                # Array of values to compute derivative at (root of estimating equation)
bread <- -1*deriv / n
############################################
# Cooking the filling (matrix algebra)
outerprod <- t(estimating_function(beta_root)) %*% estimating_function(beta_root) # Outer product of the residuals
filling <- outerprod/n
############################################
# Assembling the sandwich (matrix algebra)
sandwich <- solve(bread) %*% filling %*% t(solve(bread))
se <- sqrt(diag(sandwich / n))
ests_mest <-as.data.frame(cbind("beta"=beta_root,
"se"=se)) %>%
mutate(lcl = beta - 1.96*se,
ucl = beta + 1.95*se)
row.names(ests_mest) <- intlist
print("M-Estimation, by hand")
print(round(ests_mest,3))
####################################################################################################################
# Using geex
geex_ef <- function(data){               # Function of estimating functions (to be used in geex::m_estimate)
ptb <- data$ptb
anemia <- data$anemia
bp <- data$bp
function(theta){
p <- plogis(theta[1] + theta[2]*anemia + theta[3]*bp)
c((ptb - p),
(ptb - p)*anemia,
(ptb - p)*bp)
}
}
mestr <- geex::m_estimate(estFUN = geex_ef,                                       # Function of estimating functions
data = dat,                                             # Data to be used (must be data frame)
root_control = setup_root_control(start = c(-2,0,0)))   # Set starting values
beta_geex <- roots(mestr)             # Extract roots
se_geex <- sqrt(diag(vcov(mestr)))    # Extract finite sample variance and take sqrt to get se
ests_geex <-as.data.frame(cbind("beta"=beta_geex,
"se"=se_geex)) %>%
mutate(lcl = beta - 1.96*se,
ucl = beta + 1.95*se)
row.names(ests_geex) <- intlist
print("M-Estimation, by geex")
print(round(ests_geex,3))
############################################
# Results for logistic regression
print("Estimated logistic regression")
print("MLE")
print(round(ests_mle,3))
print("M-Estimation, by hand")
print(round(ests_mest,3))
print("M-Estimation, by hand")
print(round(ests_geex,3))
